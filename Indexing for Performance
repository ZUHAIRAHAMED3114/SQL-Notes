Link: https://app.pluralsight.com/library/courses/sqlserver-indexing-for-performance/table-of-contents

INTRODUCTION
============
Introduction-a
==============
 Index Types 
  Sql Server Contain
	-cluster Row Based
	-cluster column based
	-Non Clustered Index Structure (Row,Column)

	Important is Non-Clustered Index
  	Reason :   They Support More Efficient Access Method For Getting teh data 
		   Rather than lets say doing full table scan

  
 Depending upon the type of Index Uses Casess
  ->  Support a Seek
  ->  Index Scan (Not Table Scan it is doing whole rows)
  ->  Covering a Query (i.e measn your query fetch data will be satisfied with I.e index only
			i.e means for seek,scan the data and fetching will be done from index instead of table)
  ->  Covering multiple Queryies
  ->  Finally supporting the Constraint 
	 (index used as A Constraint) 


 Focus of this course is 
	  -> Through Understand on Row Based index
	  
          -> Evaluate Different WorkLoad Characteristics and Options 
	     Related to SqlServer Versions In Order to know what index 
	     Choices are available
	  -> Why Certain index are affective why certain are not..?
  		visual how index are used
		you can undestand different data access pattern
	  -> Explain the cost associated with different indexes 		
		    like some indexes are small narrow
		     some indexes are wide adn larger
				
		so we need to understand what are the cost associated
		with those indexes like how much space,
	

	  -> Review and Analyze the internal structure using a variety of tools and command 
		to help troubleshoot the perfromance problem

	      DBCC commands
		DMVs 
		



 2nd Objective
 -> Will understand the Covering indexs
 -> Narrow Index vs Wider Indexe
 -> Which feature is appropriate for dealing with different Query perfromance problem


 i.e makes proactively create more Usefull indexes earlier in your development life cycle..

 3rd Final Objective
 ---------------
  Understand the filter Index 
	very powerful but very limited usecase
	


 understand how to see query plans and have an unmatched filter index warning and how to resolve them



 Row Based and Column Based Index
 -------------------------------------
 Strcutre:
	1)Heap (no Sorting)
	2)Row Based Index( sorting based on the particular column)
	3)Column Based INdex (sorting based on particular row)
 
 Row Based Index :- B++ tree
 Column Based Index:
	 -All Rows of a single column stored in a single particular page
	 -Highly Compressed 
         -storage of the particular column 
			not only defined based on
			-datatype but also how it is storing..?
 	
what is OLTP vs OLAP
| Feature       | **OLTP**                          | **OLAP** (Online Analytical Processing) |
| ------------- | --------------------------------- | --------------------------------------- |
| Purpose       | Day-to-day operations             | Analytical and decision support         |
| Operations    | Insert, Update, Delete, Read      | Complex reads, aggregations, trends     |
| Users         | Clerks, cashiers, front-end users | Analysts, executives                    |
| Data volume   | Low per transaction               | High volume, historical data            |
| Schema design | Highly normalized                 | Denormalized (star/snowflake schema)    |


Requirement
--------------
 a.Priority toward data Modification like OLTP
 b.Many Point Queries (high-selective and return very few rows)
 c.Priorites toward large scale aggreaget(sum query) with highPercentage or entire dataset evaluation
 d.OLTP is Priory With Some Point Query Activity
 e.Some Range Based Query bz Management Want  Real Time Analysis
 
Work Load is OLTP
-,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
->  priorty is over data modification(just like insert,udpate,detele etc...) requirement
->  Many Point Queries (highly Selective and return low rows) (like seek Queries ) requriemtn
  For Above two case best one is Row-Based Indexes either clustered or not clustered
   and you might considered non clustered ColumnStore Index
-> row based non clustered index are very important
-> might use non clustered column store index..

WORK LOAD IS DEPEND UPON DESION SUPPORT SYSTEM,RELATIONAL DATA WAREHOUSING
------------------------------------------------------------------------
 -IF you are focussing more in analysing
   like sum of all sales,
	sum of all customer sales,
	sum of sales by customers,
	sum of sales by product
 	 
             above is requirement
  those above queries you are loooking in large amount of data 
	
 -(i.e means above query you are not looking for 
   certain dataset but for whole dataset or large set of datt)High percentage or Entire dataset is Evaluated often
 - In this case Colmn structured store index would be a much better job 
   (i.e is column structured index i.e aggregate  for whole data)
 - Secondary index also will do (at some places important )
 - Point queries benefit from row-based non clustered index 
 	
My Environment is not PURE OLTP,Not PURE DSS i.e means Hybird in i.e cases what i have to select
-----------------------------------------------------------------------------------------------
 
 1.OLTP is Priory With Some Point Query Activity
 2.Some Range Based Query bz Management Want  Real Time Analysis
 
 1. OLTP is priory with some Point Query at i.e place we need to use row based index
 2. some range query with reql time analysis at i.e place we need to use column based index
 i.e means what iam saying is 

 sol-1 here mix of indexes you need for above two requirement along different table 
 sol-2 possilbly non-clusterd columnstoreindex if data is partitioned 
	 

-----
Row Based Index
-------------
Row Compression 
-------------------------------
  2) Can Support Point quieries (seeks)
      (support scan but main is seek)
  1) Suport data Compressoin 
  3) Wide  Varities of 
		Scan
		SubSet Scan (seek+Scan)
		Covering Scan (for NonClustered)
  4) Non Clustered Covering seeks with Partial Scans
   
Colum Based Index
------------------
  1) Usually Offer Higher Level of Compression
  2) Support Large-Scale Aggression
  3) Support Partial Scan with Segment Elimination 
	


Row-based Problems
==================
 -1)More tuning work for analsis:
	MustCreate appropriate index per query 
 	and then conslidate 
  2)Store Multiple Column of data together
	(not as easily Compressed)

Column-based Problems
==================
 1)No Seek Possible (Minium set of read is row group)
	Columnstore indexes are optimized for scans, not seeks.
	Even if your filter is:
	WHERE CustomerId = 123

	Scan segments for CustomerId
	Look for matching row group(s)
	Read full segments (even if only one value matches)




DataWareHousing Before Column store index datbase how it is doing 
 i.e is some of large range base queries 

 Anwer is views 

Index Views vs Column Store
---------------------------
 Indexe Views:
 -----------------
  -Limited uses in non-Enterprise edition
  -Require Certain setting on this seeting need to be udpate in client
  -For Index view you have to analyse what is column need to be key	
	must be analyzed /created per query
  -More Complicated to Create
  -More Storage Required
  -More Administrative overhaed/maintenance
  -More Costly to maintain during insret/updates
 
 COlumn Store INdex:
 --------------------
  -No Session Setting Required (very attractive)
  -Only one Can be Creatd per table 
  -Very Easier to Create
  -A Lot less storage Required
  -Less Adminstrative Overhead/Maintainace 
  -Might not be able to do insert,updats,depnd upon version


Great breakdown! Here's a clean, structured comparison with your points refined and expanded for clarity. I‚Äôve added a few key considerations and clarified the differences further.

---

## **Indexed Views vs Columnstore Indexes**

### üîç Purpose:

* **Indexed Views**: Materialize complex queries (joins, aggregates) for reuse.
* **Columnstore Indexes**: Optimize large-scale analytical queries by enabling fast scans, filtering, and aggregation.

---

## üìå Indexed Views

### ‚úÖ Pros:

* Precompute expensive joins and aggregates.
* Can be queried like a regular table.
* Improves performance for very specific, repetitive queries.

### ‚ùå Cons:

* üîí **Edition Limitation**: Fully supported only in **Enterprise Edition** (with SCHEMABINDING); read-only in Standard Edition.
* ‚ö† **Session Settings Required**:

  * Must enable:

    ```sql
    SET ANSI_NULLS ON;
    SET ANSI_WARNINGS ON;
    SET CONCAT_NULL_YIELDS_NULL ON;
    SET QUOTED_IDENTIFIER ON;
    SET ARITHABORT ON;
    SET NUMERIC_ROUNDABORT OFF;
    ```
* ‚öô **Per-query Design**:

  * Indexed view must be custom-built for each query.
  * You must choose the **right key columns** and **index definition**.
* üß© **Complex to Create**:

  * Syntax restrictions: No `TOP`, `DISTINCT`, outer joins, `UNION`, etc.
  * Requires `SCHEMABINDING`.
* üíæ **More Storage**:

  * Materialized data is stored **redundantly**, increasing disk usage.
* üßπ **Higher Maintenance Cost**:

  * Every insert, update, delete to base table triggers maintenance on the indexed view.
  * Adds CPU & I/O overhead.
* üë®‚Äçüîß **Administrative Overhead**:

  * More objects to manage, more complexity in schema design.

---

## üìå Columnstore Indexes

### ‚úÖ Pros:
....
....
* üö´ **No Session Settings Required**:

  * Queries work seamlessly‚Äîno changes to SET options needed.
* üí® **Faster Aggregation & Filtering**:

  * Scans only needed **columns** instead of entire rows.
* üß† **Rowgroup Elimination**:

  * Skips large data chunks using segment metadata (min/max).
* üß± **High Compression**:

  * Up to 10x data compression reduces I/O.
* ‚öô **Simpler to Add**:

  * Can be added to existing schema easily.
* üìä **Batch Mode Execution**:

  * Processes data in vectorized batches ‚Äî CPU-efficient for large workloads.
* üöÄ **Best for OLAP/DSS**:

  * Ideal for reporting, analytics, data marts.

### ‚ùå Cons:
............
............
* üìè **Only One Clustered Columnstore Index per Table**:

  * But you can still create **nonclustered columnstore indexes** on specific columns.
* ‚úè **Poor for Point Lookups or OLTP**:

  * Less efficient for single-row operations unless paired with rowstore indexes.
* üõ† **Insert/Update Performance**:

  * Moderate to slow performance on write-heavy tables (though SQL Server uses a delta store to help).
* üîß **No Seek Support**:

  * Scans only; cannot use seek like B-trees.

---

## üßæ Summary Table

| Feature                            | Indexed View                 | Columnstore Index                  |
| ---------------------------------- | ---------------------------- | ---------------------------------- |
| **Main Use**                       | Precomputed joins/aggregates | High-speed analytics/aggregation   |
| **Session Settings Required**      | ‚úÖ Yes                        | ‚ùå No                               |
| **OLTP Performance**               | ‚ùå Poor on inserts/updates    | ‚ùå Poor (but manageable)            |
| **OLAP Performance**               | ‚ö† Good (if predesigned)      | ‚úÖ Excellent                        |
| **Ease of Creation**               | ‚ùå Complex                    | ‚úÖ Simple                           |
| **Maintenance Cost**               | üî∫ High                      | ‚ö† Moderate                         |
| **Compression**                    | ‚ùå No                         | ‚úÖ Yes                              |
| **Supported in Editions**          | üîí Fully in Enterprise only  | ‚úÖ Fully supported (2016+ Standard) |
| **Multiple per Table**             | ‚úÖ Multiple Indexed Views     | ‚ùå Only one Clustered Columnstore   |
| **Flexibility for Ad-hoc Queries** | ‚ùå Low                        | ‚úÖ High                             |
| **Storage Usage**                  | üî∫ High (data duplication)   | ‚úÖ Low (compressed segments)        |

---

## ‚úÖ Final Recommendation

| Scenario                                         | Use                                 |
| ------------------------------------------------ | ----------------------------------- |
| Fixed, predictable queries with joins/aggregates | **Indexed Views**                   |
| Exploratory queries, dashboards, large datasets  | **Columnstore Indexes**             |
| Mixed OLTP + OLAP workload                       | **Hybrid** (Columnstore + Rowstore) |

Let me know if you want example scripts for both!
	
====================================================================================================================
 ROW BASED INDEX CONCEPT
====================================================================================================================
 Row Based index Concept
 ------------------------
 -Basic structure
 -Index analogies
 -scan vs seek
 -Bookmark lookup

 
Table has clustered index or Not
 
 If Table has not Clustered Index (HEAP)
  i.e means Data is  completely unordered
  the only way you can direclty reference is link to table record 
  Non Clustered index will contain the pointer to refere the direct physical record addres

IF Table has Clustered Index 
 -Data to be Ordered by Clustering Key
 -Non Clustere index will contain the Clustered Key of table record to point instead of physical

 
NOTE 
 BASE TABLE STRUCTURE IS NOT AFFECTED BY NON CLUSTERED INDEX BUT IN TURNS IT AFFECT THEIR STRUCTURE
  but Non cluster index structure is differnt for heap and cluster index table 
  why this intereseting i.e it could be possibly impact i.e structure making them more or less efficient
  so Understand how i.e (heap or clustered )effect non clustered index is important







 When are Heap Appropriate
 ------------------------
  This below is the fantastice use case of Heap...?
 -Heap can be great for high Performance data loading and staging tables
  -do parallelize load
  -this make increase load times as linear 
  -you have parralllel threads
  -
  When iam using staging table to load data in the where house
  i will use heap will do high perfromance data load  
  and then build the appropriate clustered index on the staging table
  before i switch i.e table to partitioned table 
	
  https://app.pluralsight.com/ilx/video-courses/7fd63591-f9d3-4938-ba00-aaaee97dffb4/ae8c5260-8dd7-4e5f-9156-66ab286db5e9/f035be29-7329-40d9-ba49-401dc515fdf4

 you can check the article for highperformance for bulk loading 
  -please check in our project where bulk uploading is happening 
 -
 





