Link: https://app.pluralsight.com/library/courses/sqlserver-indexing-for-performance/table-of-contents

INTRODUCTION
============
Introduction-a
==============
 Index Types 
  Sql Server Contain
	-cluster Row Based
	-cluster column based
	-Non Clustered Index Structure
  Important is Non-Clustered Index
  Reason : They Support More Efficient Access Method For Getting teh data 
	   Rather than lets say doing full table scan

  
 Depending upon the type of Index Uses Casess
  ->  Support a Seek
  ->  Index Scan (Not Table Scan it is doing whole rows)
  ->  Covering a Query (i.e measn your query fetch data will be satisfied with I.e index only
			i.e means for seek,scan the data and fetching will be done from index instead of table)
  ->  Covering multiple Queryies
  ->  Finally supporting the Constraint 
	 (index used as A Constraint) 


 Focus of this course is 
	-> Through Understand on Row Based index
	  -> Evaluate Different WorkLoad Characteristics and Options 
	     Related to SqlServer Versions In Order to know what index 
	     Choices are available

	  -> Why Certain index are affective why certain are not..?
  		visual how index are used
		you can undestand different data access pattern
		
	  -> Explain the cost associated with different indexes 		
		like some indexes are small narrow
		     some indexes are wide adn larger
				
		so we need to understand what are the cost associated
		with those indexes like how much space,
	

	  -> Review and Analyze the internal structure using a variety of tools and command 
		to help troubleshoot the perfromance problem

	      DBCC commands
		DMVs 
		



 2nd Objective
 -> Will understand the Covering indexs
 -> Narrow Index vs Wider Indexe
 -> Which feature is appropriate for dealing with different Query perfromance problem


 i.e makes proactively create more Usefull indexes earlier in your development life cycle..

 3rd Final Objective
 ---------------
  Understand the filter Index 
	very powerful but very limited usecase
	


 understand how to see query plans and have an unmatched filter index warning and how to resolve them



 Row Based and Column Based Index
 -------------------------------------
 Strcutre:
	1)Heap (no Sorting)
	2)Row Based Index( sorting based on the particular column)
	3)Column Based INdex (sorting based on particular row)
 
 Row Based Index :- B++ tree
 Column Based Index:
	 -All Rows of a single column stored in a single particular page
	 -Highly Compressed 
         -storage of the particular column 
			not only defined based on
			-datatype but also how it is storing..?
 	
what is OLTP vs OLAP
| Feature       | **OLTP**                          | **OLAP** (Online Analytical Processing) |
| ------------- | --------------------------------- | --------------------------------------- |
| Purpose       | Day-to-day operations             | Analytical and decision support         |
| Operations    | Insert, Update, Delete, Read      | Complex reads, aggregations, trends     |
| Users         | Clerks, cashiers, front-end users | Analysts, executives                    |
| Data volume   | Low per transaction               | High volume, historical data            |
| Schema design | Highly normalized                 | Denormalized (star/snowflake schema)    |


Requirement
--------------
 a.Priority toward data Modification like OLTP
 b.Many Point Queries (high-selective and return very few rows)
 c.Priorites toward large scale aggreaget(sum query) with highPercentage or entire dataset evaluation
 d.OLTP is Priory With Some Point Query Activity
 e.Some Range Based Query bz Management Want  Real Time Analysis
 
Work Load is OLTP
-,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
->  priorty is over data modification(just like insert,udpate,detele etc...) requirement
->  Many Point Queries (highly Selective and return low rows) (like seek Queries ) requriemtn
  For Above two case best one is Row-Based Indexes either clustered or not clustered
   and you might considered non clustered ColumnStore Index
-> row based non clustered index are very important
-> might use non clustered column store index..

WORK LOAD IS DEPEND UPON DESION SUPPORT SYSTEM,RELATIONAL DATA WAREHOUSING
------------------------------------------------------------------------
 -IF you are focussing more in analysing
   like sum of all sales,
	sum of all customer sales,
	sum of sales by customers,
	sum of sales by product
 	 
             above is requirement
  those above queries you are loooking in large amount of data 
	
 -(i.e means above query you are not looking for 
   certain dataset but for whole dataset or large set of datt)High percentage or Entire dataset is Evaluated often
 - In this case Colmn structured store index would be a much better job 
   (i.e is column structured index i.e aggregate  for whole data)
 - Secondary index also will do (at some places important )
 - Point queries benefit from row-based non clustered index 
 	
My Environment is not PURE OLTP,Not PURE DSS i.e means Hybird in i.e cases what i have to select
-----------------------------------------------------------------------------------------------
 
 1.OLTP is Priory With Some Point Query Activity
 2.Some Range Based Query bz Management Want  Real Time Analysis
 
 1. OLTP is priory with some Point Query at i.e place we need to use row based index
 2. some range query with reql time analysis at i.e place we need to use column based index
 i.e means what iam saying is 

 sol-1 here mix of indexes you need for above two requirement along different table 
 sol-2 possilbly non-clusterd columnstoreindex if data is partitioned 
	 



Differance between Row-based index vs Column-Based Index and Problems
